#!/usr/bin/env ruby
# coding: utf-8

require 'rubygems'
require 'twitter'
require 'pastie-api'
require 'optparse'
require 'nokogiri'
require 'wputils'
require 'whiplash/version'
require 'initcommand'

usage = "Usage: pwrslv init {url|file} [--ovrwr]\n"\
        "       pwrslv [OPTIONS]"

# Setting default options
options = { :maxtweets => 1,       # Number of tweets to get from tweeter
            :interative => false,  # No interactive
            :ovrwr => false,       # No overwrite
            :verbose => 0          # Verbosity level: no message
          }
OptionParser.new do |opt|
  opt.banner = usage
  opt.version = Whiplash::VERSION
  opt.separator ""
  opt.separator "Specific options:"
  opt.on('-i',
         '--interactive',
         'This version is not yet implemented'
        ) { |o| options [:interactive] = true }
  opt.on('-m',
         '--max MAX',
         Integer,
         'Maximum number of tweets retrieve from',
         'a specific TAG'
        ) { |o| options[:maxtweets] = o.to_i }
  opt.on('--ovrwr',
         'flag that enables overrides files,',
         'directories') { |o| options[:ovrwr] = true }
  opt.on('-t',
         '--tag TAG',
         String,
         'A TAG that identifies a group',
         'of persons interested on the message'
        ) { |o| options[:tag] = o }
  opt.on '--verbose LEVEL' do |o|
    options[:verbose] = o.to_i
    unless 0 <= options[:verbose] and options[:verbose] <= 3
      puts opt.help
      exit 1
    end
  end
  opt.on '-v', '--version' do |o|
    puts 'pwrslv version "' + opt.version + '"'
    exit 0
  end
  opt.on '-h', '--help' do
    puts opt.help
    exit 0
  end
end.parse!

if ARGV[0] == "init" then
  ARGV.shift
  if ARGV.length == 1 then
    createSubTreeDirectory '.powerslave', options[:ovrwr], ARGV[0]
    exit 0
  else
    STDERR.puts usage
    exit 1
  end
end

unless ARGV.empty? then
  STDOUT.puts usage
  exit 1
end

# usertwitter=ARGV[0]

yamlconf = getPScfgFile
client = get_tweeter_client yamlconf

begin
  tag = getWPTag options
  puts "Tag: #{tag}" if options[:verbose] > 0
  tweets = client.search tag
  puts "Tweets: #{tweets}" if options[:verbose] > 0
  nro = 0
  tweets.each do |tw|
    nro += 1
    printLevelMsg 1, options[:verbose], "Tweet text: #{tw.text}"
    
    uri = /https:\/\/t.co\/.*/.match(tw.text)
    endIfNil(uri, "Invalid URI on tweet")
    printLevelMsg 1, options[:verbose], "Getting uri: #{uri[0]} short uri:"
    
    endIfNil(uri[0], "Invalid URI format")
    
    ruri = resolve_redirects(uri[0])
    printLevelMsg 1, options[:verbose], "Resolved URI: #{ruri}"
    
    idinfo = /http:\/\/pastie\.org\/(\d+)/.match(ruri)
    printLevelMsg 1, options[:verbose], "Processing idinfo: #{idinfo[0]}"

    endIfNil idinfo[1], "Invalid Pastie id"
    printLevelMsg 1, options[:verbose], "Getting Pastie id: #{idinfo[1]}"
    
    p = Pastie.get idinfo[1]
    printLevelMsg 1, options[:verbose], "Pastie: #{p}"
    endIfNil p, "get pastie is nil"
    
    doc = Nokogiri::HTML p.content
    src = doc.at('body').at('pre').
          inner_html.gsub("<br>", "\n").gsub("<br/>", "\n").
          gsub("&lt;","<").gsub("&gt;",">").gsub("&amp;", "&").
          gsub("&aacute;", "á").gsub("&eacute;", "é").gsub("&iacute;", "í").
          gsub("&oacute;", "ó").gsub("&uactue;", "ú")
    printLevelMsg 3, options[:verbose], "Source file: #{src}"
    
    lines = src.split /\n|\r\n/
    lastLine = lines[lines.length - 1]
    psflnm = /.*filename: (.*)/.match lastLine
    
    endIfNil psflnm[1], "Cannot get filename from pastie link. Process ends"
    filename = psflnm[1]

    unless File.exist? filename and not options[:ovrwr] then
      STDOUT.print "Start writing #{filename}"
      STDOUT.flush
    end
    
    begin

      unless File.exist? filename and not options[:ovrwr] then
        file = File.open filename, "w+"
        nwlines = lines.first(lines.length - 1).last(lines.length - 2)
        file.puts nwlines
      end
    rescue Exception => e
      STDERR.puts "\nError writting #{filename} due: #{e}"
      exit 1
    end

    unless File.exist? filename and not options[:ovrwr] then
      STDOUT.puts " End writing #{filename}"
    end
    
    break if nro == options[:maxtweets]
  end
rescue Exception => e
  
  STDERR.puts e
  exit 1
end
