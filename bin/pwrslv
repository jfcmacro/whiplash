#!/usr/bin/env ruby

require 'rubygems'
require 'twitter'
require 'pastie-api'
require 'optparse'
require 'nokogiri'
require 'wputils'
require 'whiplash/version'
require 'initcommand'

usage = "Usage: pwrslv init {url|file} [--ovrwr]\n"\
        "       pwrslv [OPTIONS]"

options = { :maxtweets => 1,
            :interative => false,
            :ovrwr => false,
            :verbose => 0
          }
OptionParser.new do |opt|
  opt.banner = usage
  opt.version = Whiplash::VERSION
  opt.separator ""
  opt.separator "Specific options:"
  opt.on('-i',
         '--interactive',
         'This version is not yet implemented'
        ) { |o| options [:interactive] = true }
  opt.on('-m',
         '--max MAX',
         Integer,
         'Maximum number of tweets retrieve from',
         'a specific TAG'
        ) { |o| options[:maxtweets] = o.to_i }
  opt.on('--ovrwr',
         'flag that enables overrides files,',
         'directories') { |o| options[:ovrwr] = true }
  opt.on('-t',
         '--tag TAG',
         String,
         'A TAG that identifies a group',
         'of persons interested on the message'
        ) { |o| options[:tag] = o }
  opt.on('--verbose LEVEL') do |o|
    options[:verbose] = o.to_i
    unless 0 <= options[:verbose] and options[:verbose] <= 2
      puts opt.help
      exit 1
    end
  end
  opt.on('-v', '--version') do |o|
    puts 'pwrslv version "' + opt.version + '"'
    exit 0
  end
  opt.on('-h', '--help') do
    puts opt.help
    exit 0
  end
end.parse!

if ARGV[0] == "init" then
  ARGV.shift
  if ARGV.length == 1 then
    createSubTreeDirectory('.powerslave', options[:ovrwr], ARGV[0])
    exit 0
  else
    STDERR.puts usage
    exit 1
  end
end

unless ARGV.empty? then
  STDOUT.puts usage
  exit 1
end

usertwitter=ARGV[0]

yamlconf = getPScfgFile()
client = get_tweeter_client(yamlconf)

begin
  tag = getWPTag(options)
  puts "Tag: #{tag}" if options[:verbose] > 0
  tweets = client.search(tag)
  puts "Tweets: #{tweets}" if options[:verbose] > 0
  nro = 0
  tweets.each do |tw|
    nro += 1
    puts "Tweet text: #{tw.text}" if options[:verbose] > 0
    uri = /https:\/\/t.co\/.*/.match(tw.text)
    unless uri == nil
      puts "Getting uri: #{uri[0]} short uri:"
      unless uri[0] == nil
        ruri = resolve_redirects(uri[0])
        idinfo = /http:\/\/pastie\.org\/(\d+)/.match(ruri)
        puts "Processing idinfo: #{idinfo[0]}" if options[:verbose] > 0
        unless idinfo[1] == nil
          puts "Getting Pastie: #{idinfo[1]}" if options[:verbose] > 0
          p = Pastie.get(idinfo[1])
          puts "Pastie: #{p}" if options[:verbose] > 0
          unless p == nil
            doc = Nokogiri::HTML(p.content)
            src = doc.at('body').at('pre').
                  inner_html.gsub("<br>", "\n").gsub("<br/>", "\n").
                  gsub("&lt;","<").gsub("&gt;",">").gsub("&amp;", "&")
            lines = src.split(/\n/)
            lastLine = lines[lines.length - 1]
            psflnm = /.*filename: (.*)/.match(lines[lines.length - 1])
            if psflnm[1] == nil
              STDERR.puts "Cannot get filename from pastie link. Process ends"
              exit 1
            end
            filename = psflnm[1]
            print "Start writing #{filename}"
            $stdout.flush
            begin
              file = File.open(filename, "w+")
              nwlines = lines.first(lines.length - 1)
              nwlines.each do |line|
                file.puts(line)
              end
            rescue Exception => e
              STDERR.puts "\nError writting #{filename} due: #{e}"
              exit 1
            end
            puts " End writing #{filename}"
          end
        end
      end
    end
    break if nro == options[:maxtweets]
  end
rescue Exception => e
  STDERR.puts e
  exit 1
end
